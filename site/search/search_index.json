{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ZhiZu.io","text":"<p>Since the site has not been created, there are no technical articles. Perhaps you can check our blog first</p> <p>Go to </p> <p>We actually have an xmpp channel</p> <ul> <li> XMPP</li> <li> MATRIX</li> <li> DOUYIN</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/10/02/livereload/","title":"fix(ci): Blog Plugin Causes LiveReload Failure - Investigation and Solutions","text":""},{"location":"blog/2025/10/02/livereload/#problem-description","title":"Problem Description","text":"<p>Live Reload Failure</p> <p>While developing the ZhiZu.io documentation site, we encountered a persistent issue: after adding blog plugins, the <code>mkdocs serve</code> live reload functionality stopped working.</p> <p>Impact Analysis</p> <ul> <li>Every file modification required a manual server restart</li> <li>Development efficiency reduced by approximately 70%</li> <li>Debugging cycle time increased significantly</li> </ul>"},{"location":"blog/2025/10/02/livereload/#initial-investigation","title":"Initial Investigation","text":"<p>Plugin Configuration Analysis</p> <p>We first suspected plugin configuration order issues. Examining the <code>mkdocs.yml</code> configuration:</p> <pre><code>plugins:\n  - social\n  - search\n  - blog\n</code></pre> <p>Initial Attempt Failed</p> <p>We adjusted the plugin order, moving search plugin to the first position, but the problem persisted:</p> <pre><code>plugins:\n  - search\n  - social\n  - blog\n</code></pre> <p>Key Breakthrough</p> <p>After testing various approaches, we discovered an effective parameter combination:</p> <pre><code>mkdocs serve --livereload --dirtyreload\n</code></pre> <p>Partial Success</p> <p>This solution resolved hot reload for most pages, but one issue remained...</p>"},{"location":"blog/2025/10/02/livereload/#deep-dive-precise-problem-boundaries","title":"Deep Dive: Precise Problem Boundaries","text":"<p>Systematic Testing Approach</p> <p>With forced hot reload parameters enabled, we conducted more detailed testing and discovered a critical pattern:</p> <p>Working Hot Reload Scope</p> <p>Normal Functionality Areas: - Regular documentation pages (all files in <code>/docs/</code> directory) - Configuration files (<code>mkdocs.yml</code>) - Theme resources and style files</p> <p>Persistent Issues</p> <p>Areas Still Requiring Manual Restart: - Blog posts (any content in <code>/blog/</code> directory) - Blog post Front Matter metadata changes - Blog directory structure modifications</p>"},{"location":"blog/2025/10/02/livereload/#root-cause-analysis","title":"Root Cause Analysis","text":"<p>Architecture Conflict Identified</p> <p>This precise boundary indicates that: the blog plugin creates an independent content management mechanism for blog content.</p> <p>Technical Deep Dive</p> <ol> <li>File Watch Isolation </li> <li>Blog plugin takes over file watching events for <code>/blog/</code> directory</li> <li> <p>Creates separate event handlers that bypass standard monitoring</p> </li> <li> <p>Independent Build Cache</p> </li> <li>Blog content uses separate caching system  </li> <li> <p>Implements custom cache invalidation logic</p> </li> <li> <p>Architecture Conflict</p> </li> <li>Plugin's complex functionality conflicts with MkDocs core hot reload mechanism</li> <li>Parallel systems create race conditions and update conflicts</li> </ol>"},{"location":"blog/2025/10/02/livereload/#solutions","title":"Solutions","text":"<p>Development Environment Solution</p> <pre><code># Recommended development command\nmkdocs serve --livereload --dirtyreload\n</code></pre> <p>Parameter Analysis</p> <ul> <li><code>--livereload</code>: Forces browser auto-refresh by maintaining persistent connection</li> <li><code>--dirtyreload</code>: Uses incremental builds for faster performance and reduced latency</li> </ul> <p>Optimized Development Workflow</p> <p>Based on problem boundaries, we adopt a layered development strategy:</p> <p>For Regular Content</p> <pre><code># Fast iteration development\nmkdocs serve --livereload --dirtyreload\n</code></pre> <p>For Blog Content</p> <pre><code># Required workflow for blog development:\n1. Modify blog posts\n2. Manually restart server (Ctrl+C \u2192 mkdocs serve)\n3. Verify changes and continue development\n</code></pre> <p>Technical Insights &amp; Architecture Implications</p> <p>The discovery that only blog pages require restarts reveals important architecture insights:</p> <p>Plugin Architecture Analysis</p> <ul> <li>Blog plugins often implement custom content processors</li> <li>These processors may not integrate seamlessly with MkDocs' watch system</li> <li>The <code>--livereload --dirtyreload</code> combination forces a workaround at the system level</li> </ul> <p>Future Considerations</p> <ul> <li>Should blog plugins be refactored for better integration?</li> <li>Are there alternative plugins with better hot reload support?</li> <li>Could custom event handlers bridge the gap between systems?</li> </ul>"},{"location":"blog/2025/10/02/livereload/#conclusion","title":"Conclusion","text":"<p>Investigation Outcome &amp; Impact</p> <p>This investigation demonstrates the importance of understanding precise problem boundaries in technical troubleshooting.</p> <p>Achievements</p> <ul> <li>Identified exact scope of live reload failure</li> <li>Developed effective workaround for 80% of use cases</li> <li>Established clear development protocols for different content types</li> </ul> <p>Limitations</p> <ul> <li>Blog content still requires manual intervention</li> <li>Complete automation not achievable with current plugin architecture</li> </ul> <p>Lessons Learned &amp; Best Practices</p> <p>Successful Strategies</p> <ol> <li>Systematic Boundary Testing - Always test problem boundaries precisely</li> <li>Parameter Exploration - Command-line parameters often provide crucial workarounds</li> </ol> <p>Challenges Identified</p> <ol> <li>Plugin Complexity - Plugin conflicts can manifest in subtle ways</li> <li>Architecture Understanding - Understanding the exact scope of an issue is half the solution</li> </ol>"},{"location":"blog/archive/2025/","title":"2025","text":""}]}