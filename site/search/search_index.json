{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ZhiZu.io","text":"<p>We're working on a tutorial book, but please keep checking our blog until we're done</p> <p>Go to </p> <p>We actually have an xmpp channel</p> <p>In fact, we also have a DOUYIN group</p> <ul> <li> XMPP</li> <li> DOUYIN</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/10/02/livereload/","title":"fix(ci): Blog Plugin Causes LiveReload Failure - Investigation and Solutions","text":""},{"location":"blog/2025/10/02/livereload/#problem-description","title":"Problem Description","text":"<p>Live Reload Failure</p> <p>While developing the ZhiZu.io documentation site, we encountered a persistent issue: after adding blog plugins, the <code>mkdocs serve</code> live reload functionality stopped working.</p> <p>Impact Analysis</p> <ul> <li>Every file modification required a manual server restart</li> <li>Development efficiency reduced by approximately 70%</li> <li>Debugging cycle time increased significantly</li> </ul>"},{"location":"blog/2025/10/02/livereload/#initial-investigation","title":"Initial Investigation","text":"<p>Plugin Configuration Analysis</p> <p>We first suspected plugin configuration order issues. Examining the <code>mkdocs.yml</code> configuration:</p> <pre><code>plugins:\n  - social\n  - search\n  - blog\n</code></pre> <p>Initial Attempt Failed</p> <p>We adjusted the plugin order, moving search plugin to the first position, but the problem persisted:</p> <pre><code>plugins:\n  - search\n  - social\n  - blog\n</code></pre> <p>Key Breakthrough</p> <p>After testing various approaches, we discovered an effective parameter combination:</p> <pre><code>mkdocs serve --livereload --dirtyreload\n</code></pre> <p>Partial Success</p> <p>This solution resolved hot reload for most pages, but one issue remained...</p>"},{"location":"blog/2025/10/02/livereload/#deep-dive-precise-problem-boundaries","title":"Deep Dive: Precise Problem Boundaries","text":"<p>Systematic Testing Approach</p> <p>With forced hot reload parameters enabled, we conducted more detailed testing and discovered a critical pattern:</p> <p>Working Hot Reload Scope</p> <p>Normal Functionality Areas: - Regular documentation pages (all files in <code>/docs/</code> directory) - Configuration files (<code>mkdocs.yml</code>) - Theme resources and style files</p> <p>Persistent Issues</p> <p>Areas Still Requiring Manual Restart: - Blog posts (any content in <code>/blog/</code> directory) - Blog post Front Matter metadata changes - Blog directory structure modifications</p>"},{"location":"blog/2025/10/02/livereload/#root-cause-analysis","title":"Root Cause Analysis","text":"<p>Architecture Conflict Identified</p> <p>This precise boundary indicates that: the blog plugin creates an independent content management mechanism for blog content.</p> <p>Technical Deep Dive</p> <ol> <li>File Watch Isolation </li> <li>Blog plugin takes over file watching events for <code>/blog/</code> directory</li> <li> <p>Creates separate event handlers that bypass standard monitoring</p> </li> <li> <p>Independent Build Cache</p> </li> <li>Blog content uses separate caching system  </li> <li> <p>Implements custom cache invalidation logic</p> </li> <li> <p>Architecture Conflict</p> </li> <li>Plugin's complex functionality conflicts with MkDocs core hot reload mechanism</li> <li>Parallel systems create race conditions and update conflicts</li> </ol>"},{"location":"blog/2025/10/02/livereload/#solutions","title":"Solutions","text":"<p>Development Environment Solution</p> <pre><code># Recommended development command\nmkdocs serve --livereload --dirtyreload\n</code></pre> <p>Parameter Analysis</p> <ul> <li><code>--livereload</code>: Forces browser auto-refresh by maintaining persistent connection</li> <li><code>--dirtyreload</code>: Uses incremental builds for faster performance and reduced latency</li> </ul> <p>Optimized Development Workflow</p> <p>Based on problem boundaries, we adopt a layered development strategy:</p> <p>For Regular Content</p> <pre><code># Fast iteration development\nmkdocs serve --livereload --dirtyreload\n</code></pre> <p>For Blog Content</p> <pre><code># Required workflow for blog development:\n1. Modify blog posts\n2. Manually restart server (Ctrl+C \u2192 mkdocs serve)\n3. Verify changes and continue development\n</code></pre> <p>Technical Insights &amp; Architecture Implications</p> <p>The discovery that only blog pages require restarts reveals important architecture insights:</p> <p>Plugin Architecture Analysis</p> <ul> <li>Blog plugins often implement custom content processors</li> <li>These processors may not integrate seamlessly with MkDocs' watch system</li> <li>The <code>--livereload --dirtyreload</code> combination forces a workaround at the system level</li> </ul> <p>Future Considerations</p> <ul> <li>Should blog plugins be refactored for better integration?</li> <li>Are there alternative plugins with better hot reload support?</li> <li>Could custom event handlers bridge the gap between systems?</li> </ul>"},{"location":"blog/2025/10/02/livereload/#conclusion","title":"Conclusion","text":"<p>Investigation Outcome &amp; Impact</p> <p>This investigation demonstrates the importance of understanding precise problem boundaries in technical troubleshooting.</p> <p>Achievements</p> <ul> <li>Identified exact scope of live reload failure</li> <li>Developed effective workaround for 80% of use cases</li> <li>Established clear development protocols for different content types</li> </ul> <p>Limitations</p> <ul> <li>Blog content still requires manual intervention</li> <li>Complete automation not achievable with current plugin architecture</li> </ul> <p>Lessons Learned &amp; Best Practices</p> <p>Successful Strategies</p> <ol> <li>Systematic Boundary Testing - Always test problem boundaries precisely</li> <li>Parameter Exploration - Command-line parameters often provide crucial workarounds</li> </ol> <p>Challenges Identified</p> <ol> <li>Plugin Complexity - Plugin conflicts can manifest in subtle ways</li> <li>Architecture Understanding - Understanding the exact scope of an issue is half the solution</li> </ol>"},{"location":"blog/2025/10/02/update/","title":"\u5220\u9664\u4e00\u884c\u591a\u4f59\u7684\u65e0\u7528\u914d\u7f6e","text":"<p>\u4e4b\u524d\u4e0d\u5c0f\u5fc3\u6dfb\u52a0\u4e86\u4e00\u9879\u591a\u4f59\u914d\u7f6e\uff0c\u66f4\u65b0\u4e00\u4e0b\uff0c\u5c06\u8fd9\u4e2a\u591a\u4f59\u914d\u7f6e\u5220\u6389</p> git diff<pre><code>diff --git a/mkdocs.yml b/mkdocs.yml\nindex 4e980a5..8e4f184 100644\n--- a/mkdocs.yml\n+++ b/mkdocs.yml\n@@ -48,7 +48,6 @@ markdown_extensions:\n   - pymdownx.critic\n   - pymdownx.tabbed:\n       alternate_style: true\n-      alternate_style: true\n   - pymdownx.keys\n   - pymdownx.details\n   - admonition\n</code></pre> <p>\u518d\u63d2\u53e5\u9898\u5916\u8bdd\uff0c\u67d0\u7f16\u5267\u5c5e\u4e8e\u662f\u6f14\u90fd\u4e0d\u6f14\u4e86</p>"},{"location":"blog/2025/10/05/Not-illegal/","title":"\u4e0d\u8981\u4f5c\u6076\uff01","text":"<p>\u5927\u5bb6\u597d\uff0c\u672c\u7bc7\u6587\u7ae0\u4ec5\u4f5c\u4e3a\u6211\u5bf9\u6b64\u4e8b\u4ef6\u7684 \u4e2a\u4eba\u770b\u6cd5\u4ee5\u53ca\u60f3\u6cd5 \u4e0d\u6784\u6210 \u5ba2\u89c2\u4e8b\u5b9e</p> <p>\u518d\u6b21\u58f0\u660e\uff1a\u6211\u4ee5\u4e0b\u8bf4\u7684\u6240\u6709\u8bdd\uff0c\u53ea\u662f\u6211\u4e2a\u4eba\u5bf9\u6b64\u6b21\u4e8b\u4ef6\u7684\u89c2\u540e\u611f\uff0c\u4e0d\u505a\u4efb\u4f55\u5f62\u5f0f\u4e0a\u7684\u62c5\u4fdd</p> <p>\u90a3\u4e48\u5c31\u8ba9\u6211\u6765\u9610\u8ff0\u4e00\u4e0b\u6211\u7684\u89c2\u540e\u611f\uff0c\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u662f\u4e00\u540d\u7a0b\u5e8f\u5458\uff0c\u4f46\u6211\u60f3\u63a2\u7d22\u5c1d\u8bd5\u65b0\u4e8b\u7269\uff0c\u4e8e\u662f\u6211\u5c31\u5f00\u59cb\u52a0\u5165\u4e0d\u540c\u7684\u5708\u5b50\uff0c\u6bcf\u4e2a\u5708\u5b50\u7684\u89c4\u5219\u90fd\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u79d1\u6280\u5708\u662f\u770b\u5b9e\u529b\uff0c\u718a\u5708\u662f\u770b\u8c01\u8bf4\u7684\u8bdd\u591a\uff0c\u8c01\u66f4\u80fd\u8bf4\u670d\u522b\u4eba\uff0c\u8c01\u66f4\u6709\u8bdd\u8bed\u6743\uff1f\u81f3\u4e8e\u8fd9\u4e2a\u8bdd\u8bed\u6743\u662f\u600e\u4e48\u5efa\u7acb\u8d77\u6765\u7684\uff0c\u6211\u4eec\u65e0\u4ece\u5f97\u77e5\uff0c\u5b83\u4f3c\u4e4e\u4e0e\u903b\u8f91\u7684\u4e25\u8c28\u6027\u65e0\u5173\uff0c\u800c\u4e0e\u58f0\u97f3\u7684\u97f3\u91cf\u3001\u60c5\u611f\u7684\u717d\u52a8\u6027\u548c\u9635\u8425\u7684\u5f52\u5c5e\u611f\u7d27\u5bc6\u76f8\u8fde\u3002\u4f5c\u4e3a\u4e00\u4e2a\u4e60\u60ef\u4e86\u4e8c\u8fdb\u5236\uff08\u975e\u9ed1\u5373\u767d\uff09\u4e16\u754c\u7684\u4eba\uff0c\u8fd9\u91cc\u7684\u7070\u5ea6\u8ba9\u6211\u65e2\u56f0\u60d1\u53c8\u7740\u8ff7\uff0c\u76f4\u81f3\u6211\u4eb2\u8eab\u5377\u5165\u5176\u4e2d\u3002</p>"},{"location":"git/Getting%20Started/001about-version-control/","title":"001 About Version Control","text":"<code>What is a version control system?</code> Version control is a system that records changes to files over time, allowing you to revert to any specific state later. While the examples in this book focus on source code management, version control can handle any file type\u2014including binaries. <sup>1</sup> If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead. <sup>1</sup> <p>For a long, long, long time. Forget it. I won't talk about it. It was a long time ago.</p> <p>But if I don't say it, some people will say that my book is not rigorous, Then I will describe it briefly.</p> <p> Little Red Riding Hood's mother told Little Red Riding Hoo\u2026"},{"location":"git/Getting%20Started/001about-version-control/#reference","title":"Reference","text":"<ol> <li> <p>Git - About Version Control \u21a9\u21a9</p> </li> </ol>"},{"location":"blog/archive/2025/","title":"2025","text":""}]}